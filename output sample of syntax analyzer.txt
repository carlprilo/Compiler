{
i=10;
j=100;
n=1;
sum=0;
mult=1;
while (i>0) {n=n+1;i=i-1;}
if (j>=50) then sum=sum+j; else {mult=mult*(j+1);sum=sum+i;}
if (i<=10) then sum=sum-i; else mult=mult+i/2;
if (i==j) then sum=sum-j; else mult=mult-j/2;
if (n>1) then n=n-1; else n=n+1;
if (n<2) then n=n+2; else n=n-2;
}
--------------------------------------------------------------------
                                 Program   ->CompoundStmt
                            CompoundStmt   ->{ Stmts }
         {
                                   Stmts   ->Stmt Stmts
                                    Stmt   ->AssigStmt
                               AssigStmt   ->id = ArithExpr ;
        id
         =
                               ArithExpr   ->MulExpr ArithExprPrime
                                 MulExpr   ->SimpleExpr MulExprPrime
                              SimpleExpr   ->num
       num
                            MulExprPrime   ->¦Å
                                      ¦Å
                          ArithExprPrime   ->¦Å
                                      ¦Å
         ;
                                   Stmts   ->Stmt Stmts
                                    Stmt   ->AssigStmt
                               AssigStmt   ->id = ArithExpr ;
        id
         =
                               ArithExpr   ->MulExpr ArithExprPrime
                                 MulExpr   ->SimpleExpr MulExprPrime
                              SimpleExpr   ->num
       num
                            MulExprPrime   ->¦Å
                                      ¦Å
                          ArithExprPrime   ->¦Å
                                      ¦Å
         ;
                                   Stmts   ->Stmt Stmts
                                    Stmt   ->AssigStmt
                               AssigStmt   ->id = ArithExpr ;
        id
         =
                               ArithExpr   ->MulExpr ArithExprPrime
                                 MulExpr   ->SimpleExpr MulExprPrime
                              SimpleExpr   ->num
       num
                            MulExprPrime   ->¦Å
                                      ¦Å
                          ArithExprPrime   ->¦Å
                                      ¦Å
         ;
                                   Stmts   ->Stmt Stmts
                                    Stmt   ->AssigStmt
                               AssigStmt   ->id = ArithExpr ;
        id
         =
                               ArithExpr   ->MulExpr ArithExprPrime
                                 MulExpr   ->SimpleExpr MulExprPrime
                              SimpleExpr   ->num
       num
                            MulExprPrime   ->¦Å
                                      ¦Å
                          ArithExprPrime   ->¦Å
                                      ¦Å
         ;
                                   Stmts   ->Stmt Stmts
                                    Stmt   ->AssigStmt
                               AssigStmt   ->id = ArithExpr ;
        id
         =
                               ArithExpr   ->MulExpr ArithExprPrime
                                 MulExpr   ->SimpleExpr MulExprPrime
                              SimpleExpr   ->num
       num
                            MulExprPrime   ->¦Å
                                      ¦Å
                          ArithExprPrime   ->¦Å
                                      ¦Å
         ;
                                   Stmts   ->Stmt Stmts
                                    Stmt   ->WhileStmt
                               WhileStmt   ->while ( BoolExpr ) Stmt
     while
         (
                                BoolExpr   ->ArithExpr BoolOp ArithExpr
                               ArithExpr   ->MulExpr ArithExprPrime
                                 MulExpr   ->SimpleExpr MulExprPrime
                              SimpleExpr   ->id
        id
                            MulExprPrime   ->¦Å
                                      ¦Å
                          ArithExprPrime   ->¦Å
                                      ¦Å
                                  BoolOp   ->>
         >
                               ArithExpr   ->MulExpr ArithExprPrime
                                 MulExpr   ->SimpleExpr MulExprPrime
                              SimpleExpr   ->num
       num
                            MulExprPrime   ->¦Å
                                      ¦Å
                          ArithExprPrime   ->¦Å
                                      ¦Å
         )
                                    Stmt   ->CompoundStmt
                            CompoundStmt   ->{ Stmts }
         {
                                   Stmts   ->Stmt Stmts
                                    Stmt   ->AssigStmt
                               AssigStmt   ->id = ArithExpr ;
        id
         =
                               ArithExpr   ->MulExpr ArithExprPrime
                                 MulExpr   ->SimpleExpr MulExprPrime
                              SimpleExpr   ->id
        id
                            MulExprPrime   ->¦Å
                                      ¦Å
                          ArithExprPrime   ->+ MulExpr ArithExprPrime
         +
                                 MulExpr   ->SimpleExpr MulExprPrime
                              SimpleExpr   ->num
       num
                            MulExprPrime   ->¦Å
                                      ¦Å
                          ArithExprPrime   ->¦Å
                                      ¦Å
         ;
                                   Stmts   ->Stmt Stmts
                                    Stmt   ->AssigStmt
                               AssigStmt   ->id = ArithExpr ;
        id
         =
                               ArithExpr   ->MulExpr ArithExprPrime
                                 MulExpr   ->SimpleExpr MulExprPrime
                              SimpleExpr   ->id
        id
                            MulExprPrime   ->¦Å
                                      ¦Å
                          ArithExprPrime   ->- MulExpr ArithExprPrime
         -
                                 MulExpr   ->SimpleExpr MulExprPrime
                              SimpleExpr   ->num
       num
                            MulExprPrime   ->¦Å
                                      ¦Å
                          ArithExprPrime   ->¦Å
                                      ¦Å
         ;
                                   Stmts   ->¦Å
                                      ¦Å
         }
                                   Stmts   ->Stmt Stmts
                                    Stmt   ->IfStmt
                                  IfStmt   ->if ( BoolExpr ) then Stmt else Stmt
        if
         (
                                BoolExpr   ->ArithExpr BoolOp ArithExpr
                               ArithExpr   ->MulExpr ArithExprPrime
                                 MulExpr   ->SimpleExpr MulExprPrime
                              SimpleExpr   ->id
        id
                            MulExprPrime   ->¦Å
                                      ¦Å
                          ArithExprPrime   ->¦Å
                                      ¦Å
                                  BoolOp   ->>=
        >=
                               ArithExpr   ->MulExpr ArithExprPrime
                                 MulExpr   ->SimpleExpr MulExprPrime
                              SimpleExpr   ->num
       num
                            MulExprPrime   ->¦Å
                                      ¦Å
                          ArithExprPrime   ->¦Å
                                      ¦Å
         )
      then
                                    Stmt   ->AssigStmt
                               AssigStmt   ->id = ArithExpr ;
        id
         =
                               ArithExpr   ->MulExpr ArithExprPrime
                                 MulExpr   ->SimpleExpr MulExprPrime
                              SimpleExpr   ->id
        id
                            MulExprPrime   ->¦Å
                                      ¦Å
                          ArithExprPrime   ->+ MulExpr ArithExprPrime
         +
                                 MulExpr   ->SimpleExpr MulExprPrime
                              SimpleExpr   ->id
        id
                            MulExprPrime   ->¦Å
                                      ¦Å
                          ArithExprPrime   ->¦Å
                                      ¦Å
         ;
      else
                                    Stmt   ->CompoundStmt
                            CompoundStmt   ->{ Stmts }
         {
                                   Stmts   ->Stmt Stmts
                                    Stmt   ->AssigStmt
                               AssigStmt   ->id = ArithExpr ;
        id
         =
                               ArithExpr   ->MulExpr ArithExprPrime
                                 MulExpr   ->SimpleExpr MulExprPrime
                              SimpleExpr   ->id
        id
                            MulExprPrime   ->* SimpleExpr MulExprPrime
         *
                              SimpleExpr   ->( ArithExpr )
         (
                               ArithExpr   ->MulExpr ArithExprPrime
                                 MulExpr   ->SimpleExpr MulExprPrime
                              SimpleExpr   ->id
        id
                            MulExprPrime   ->¦Å
                                      ¦Å
                          ArithExprPrime   ->+ MulExpr ArithExprPrime
         +
                                 MulExpr   ->SimpleExpr MulExprPrime
                              SimpleExpr   ->num
       num
                            MulExprPrime   ->¦Å
                                      ¦Å
                          ArithExprPrime   ->¦Å
                                      ¦Å
         )
                            MulExprPrime   ->¦Å
                                      ¦Å
                          ArithExprPrime   ->¦Å
                                      ¦Å
         ;
                                   Stmts   ->Stmt Stmts
                                    Stmt   ->AssigStmt
                               AssigStmt   ->id = ArithExpr ;
        id
         =
                               ArithExpr   ->MulExpr ArithExprPrime
                                 MulExpr   ->SimpleExpr MulExprPrime
                              SimpleExpr   ->id
        id
                            MulExprPrime   ->¦Å
                                      ¦Å
                          ArithExprPrime   ->+ MulExpr ArithExprPrime
         +
                                 MulExpr   ->SimpleExpr MulExprPrime
                              SimpleExpr   ->id
        id
                            MulExprPrime   ->¦Å
                                      ¦Å
                          ArithExprPrime   ->¦Å
                                      ¦Å
         ;
                                   Stmts   ->¦Å
                                      ¦Å
         }
                                   Stmts   ->Stmt Stmts
                                    Stmt   ->IfStmt
                                  IfStmt   ->if ( BoolExpr ) then Stmt else Stmt
        if
         (
                                BoolExpr   ->ArithExpr BoolOp ArithExpr
                               ArithExpr   ->MulExpr ArithExprPrime
                                 MulExpr   ->SimpleExpr MulExprPrime
                              SimpleExpr   ->id
        id
                            MulExprPrime   ->¦Å
                                      ¦Å
                          ArithExprPrime   ->¦Å
                                      ¦Å
                                  BoolOp   -><=
        <=
                               ArithExpr   ->MulExpr ArithExprPrime
                                 MulExpr   ->SimpleExpr MulExprPrime
                              SimpleExpr   ->num
       num
                            MulExprPrime   ->¦Å
                                      ¦Å
                          ArithExprPrime   ->¦Å
                                      ¦Å
         )
      then
                                    Stmt   ->AssigStmt
                               AssigStmt   ->id = ArithExpr ;
        id
         =
                               ArithExpr   ->MulExpr ArithExprPrime
                                 MulExpr   ->SimpleExpr MulExprPrime
                              SimpleExpr   ->id
        id
                            MulExprPrime   ->¦Å
                                      ¦Å
                          ArithExprPrime   ->- MulExpr ArithExprPrime
         -
                                 MulExpr   ->SimpleExpr MulExprPrime
                              SimpleExpr   ->id
        id
                            MulExprPrime   ->¦Å
                                      ¦Å
                          ArithExprPrime   ->¦Å
                                      ¦Å
         ;
      else
                                    Stmt   ->AssigStmt
                               AssigStmt   ->id = ArithExpr ;
        id
         =
                               ArithExpr   ->MulExpr ArithExprPrime
                                 MulExpr   ->SimpleExpr MulExprPrime
                              SimpleExpr   ->id
        id
                            MulExprPrime   ->¦Å
                                      ¦Å
                          ArithExprPrime   ->+ MulExpr ArithExprPrime
         +
                                 MulExpr   ->SimpleExpr MulExprPrime
                              SimpleExpr   ->id
        id
                            MulExprPrime   ->/ SimpleExpr MulExprPrime
         /
                              SimpleExpr   ->num
       num
                            MulExprPrime   ->¦Å
                                      ¦Å
                          ArithExprPrime   ->¦Å
                                      ¦Å
         ;
                                   Stmts   ->Stmt Stmts
                                    Stmt   ->IfStmt
                                  IfStmt   ->if ( BoolExpr ) then Stmt else Stmt
        if
         (
                                BoolExpr   ->ArithExpr BoolOp ArithExpr
                               ArithExpr   ->MulExpr ArithExprPrime
                                 MulExpr   ->SimpleExpr MulExprPrime
                              SimpleExpr   ->id
        id
                            MulExprPrime   ->¦Å
                                      ¦Å
                          ArithExprPrime   ->¦Å
                                      ¦Å
                                  BoolOp   ->==
        ==
                               ArithExpr   ->MulExpr ArithExprPrime
                                 MulExpr   ->SimpleExpr MulExprPrime
                              SimpleExpr   ->id
        id
                            MulExprPrime   ->¦Å
                                      ¦Å
                          ArithExprPrime   ->¦Å
                                      ¦Å
         )
      then
                                    Stmt   ->AssigStmt
                               AssigStmt   ->id = ArithExpr ;
        id
         =
                               ArithExpr   ->MulExpr ArithExprPrime
                                 MulExpr   ->SimpleExpr MulExprPrime
                              SimpleExpr   ->id
        id
                            MulExprPrime   ->¦Å
                                      ¦Å
                          ArithExprPrime   ->- MulExpr ArithExprPrime
         -
                                 MulExpr   ->SimpleExpr MulExprPrime
                              SimpleExpr   ->id
        id
                            MulExprPrime   ->¦Å
                                      ¦Å
                          ArithExprPrime   ->¦Å
                                      ¦Å
         ;
      else
                                    Stmt   ->AssigStmt
                               AssigStmt   ->id = ArithExpr ;
        id
         =
                               ArithExpr   ->MulExpr ArithExprPrime
                                 MulExpr   ->SimpleExpr MulExprPrime
                              SimpleExpr   ->id
        id
                            MulExprPrime   ->¦Å
                                      ¦Å
                          ArithExprPrime   ->- MulExpr ArithExprPrime
         -
                                 MulExpr   ->SimpleExpr MulExprPrime
                              SimpleExpr   ->id
        id
                            MulExprPrime   ->/ SimpleExpr MulExprPrime
         /
                              SimpleExpr   ->num
       num
                            MulExprPrime   ->¦Å
                                      ¦Å
                          ArithExprPrime   ->¦Å
                                      ¦Å
         ;
                                   Stmts   ->Stmt Stmts
                                    Stmt   ->IfStmt
                                  IfStmt   ->if ( BoolExpr ) then Stmt else Stmt
        if
         (
                                BoolExpr   ->ArithExpr BoolOp ArithExpr
                               ArithExpr   ->MulExpr ArithExprPrime
                                 MulExpr   ->SimpleExpr MulExprPrime
                              SimpleExpr   ->id
        id
                            MulExprPrime   ->¦Å
                                      ¦Å
                          ArithExprPrime   ->¦Å
                                      ¦Å
                                  BoolOp   ->>
         >
                               ArithExpr   ->MulExpr ArithExprPrime
                                 MulExpr   ->SimpleExpr MulExprPrime
                              SimpleExpr   ->num
       num
                            MulExprPrime   ->¦Å
                                      ¦Å
                          ArithExprPrime   ->¦Å
                                      ¦Å
         )
      then
                                    Stmt   ->AssigStmt
                               AssigStmt   ->id = ArithExpr ;
        id
         =
                               ArithExpr   ->MulExpr ArithExprPrime
                                 MulExpr   ->SimpleExpr MulExprPrime
                              SimpleExpr   ->id
        id
                            MulExprPrime   ->¦Å
                                      ¦Å
                          ArithExprPrime   ->- MulExpr ArithExprPrime
         -
                                 MulExpr   ->SimpleExpr MulExprPrime
                              SimpleExpr   ->num
       num
                            MulExprPrime   ->¦Å
                                      ¦Å
                          ArithExprPrime   ->¦Å
                                      ¦Å
         ;
      else
                                    Stmt   ->AssigStmt
                               AssigStmt   ->id = ArithExpr ;
        id
         =
                               ArithExpr   ->MulExpr ArithExprPrime
                                 MulExpr   ->SimpleExpr MulExprPrime
                              SimpleExpr   ->id
        id
                            MulExprPrime   ->¦Å
                                      ¦Å
                          ArithExprPrime   ->+ MulExpr ArithExprPrime
         +
                                 MulExpr   ->SimpleExpr MulExprPrime
                              SimpleExpr   ->num
       num
                            MulExprPrime   ->¦Å
                                      ¦Å
                          ArithExprPrime   ->¦Å
                                      ¦Å
         ;
                                   Stmts   ->Stmt Stmts
                                    Stmt   ->IfStmt
                                  IfStmt   ->if ( BoolExpr ) then Stmt else Stmt
        if
         (
                                BoolExpr   ->ArithExpr BoolOp ArithExpr
                               ArithExpr   ->MulExpr ArithExprPrime
                                 MulExpr   ->SimpleExpr MulExprPrime
                              SimpleExpr   ->id
        id
                            MulExprPrime   ->¦Å
                                      ¦Å
                          ArithExprPrime   ->¦Å
                                      ¦Å
                                  BoolOp   -><
         <
                               ArithExpr   ->MulExpr ArithExprPrime
                                 MulExpr   ->SimpleExpr MulExprPrime
                              SimpleExpr   ->num
       num
                            MulExprPrime   ->¦Å
                                      ¦Å
                          ArithExprPrime   ->¦Å
                                      ¦Å
         )
      then
                                    Stmt   ->AssigStmt
                               AssigStmt   ->id = ArithExpr ;
        id
         =
                               ArithExpr   ->MulExpr ArithExprPrime
                                 MulExpr   ->SimpleExpr MulExprPrime
                              SimpleExpr   ->id
        id
                            MulExprPrime   ->¦Å
                                      ¦Å
                          ArithExprPrime   ->+ MulExpr ArithExprPrime
         +
                                 MulExpr   ->SimpleExpr MulExprPrime
                              SimpleExpr   ->num
       num
                            MulExprPrime   ->¦Å
                                      ¦Å
                          ArithExprPrime   ->¦Å
                                      ¦Å
         ;
      else
                                    Stmt   ->AssigStmt
                               AssigStmt   ->id = ArithExpr ;
        id
         =
                               ArithExpr   ->MulExpr ArithExprPrime
                                 MulExpr   ->SimpleExpr MulExprPrime
                              SimpleExpr   ->id
        id
                            MulExprPrime   ->¦Å
                                      ¦Å
                          ArithExprPrime   ->- MulExpr ArithExprPrime
         -
                                 MulExpr   ->SimpleExpr MulExprPrime
                              SimpleExpr   ->num
       num
                            MulExprPrime   ->¦Å
                                      ¦Å
                          ArithExprPrime   ->¦Å
                                      ¦Å
         ;
                                   Stmts   ->¦Å
                                      ¦Å
         }
         $
                           Parsing ended