program#{ -> compoundstmt
stmt#int -> decl
stmt#real -> decl
stmt#if -> ifstmt
stmt#while -> whilestmt
stmt#ID -> assgstmt
stmt#{ -> compoundstmt
compoundstmt#{ -> { stmts }
stmts#{ -> stmt stmts
stmts#if -> stmt stmts
stmts#while -> stmt stmts
stmts#ID ->  stmt stmts
stmts#int -> stmt stmts
stmts#real -> stmt stmts
stmts#if -> stmt stmts
stmts#while -> stmt stmts
stmts#} -> $
ifstmt#if -> if ( boolexpr ) then stmt else stmt
whilestmt#while ->  while ( boolexpr ) stmt
assgstmt#ID -> ID = arithexpr ;
decl#int -> type list ;
decl#real -> type list ;
type#int -> int
type#real -> real
list#ID -> ID list1
list1#, -> , list
list1#; -> $
boolexpr#ID -> arithexpr boolop arithexpr
boolexpr#( -> arithexpr boolop arithexpr
boolexpr#int -> arithexpr boolop arithexpr
boolexpr#real -> arithexpr boolop arithexpr
boolop#< -> <
boolop#> -> >
boolop#<= -> <=
boolop#>= -> >=
boolop#== -> ==
arithexpr#; -> multexpr arithexprprime
arithexpr#( -> multexpr arithexprprime
arithexpr#ID -> multexpr arithexprprime
arithexpr#int -> multexpr arithexprprime
arithexpr#real -> multexpr arithexprprime
arithexprprime#+ -> + multexpr arithexprprime
arithexprprime#- -> - multexpr arithexprprime
arithexprprime#) -> $
arithexprprime#; -> $
arithexprprime#< -> $
arithexprprime#> -> $
arithexprprime#<= -> $
arithexprprime#== -> $
arithexprprime#>= -> $
multexpr#) -> simpleexpr multexprprime
multexpr#ID -> simpleexpr multexprprime
multexpr#int -> simpleexpr multexprprime
multexpr#real -> simpleexpr multexprprime
multexprprime#* -> * simpleexpr multexprprime
multexprprime#/ -> / simpleexpr multexprprime
multexprprime#) -> $
multexprprime#; -> $
multexprprime#< -> $
multexprprime#> -> $
multexprprime#<= -> $
multexprprime#>= -> $
multexprprime#== -> $
multexprprime#+ -> $
multexprprime#- -> $
simpleexpr#ID -> ID
simpleexpr#int -> int
simpleexpr#real -> real
simpleexpr#( -> ( arithexpr )
NUM#int -> int
NUM#real -> real