program -> compoundstmt
stmt ->  decl
stmt ->  ifstmt
stmt ->  whilestmt
stmt ->  assgstmt
stmt ->  compoundstmt
compoundstmt -> { stmts }
stmts ->  stmt stmts
stmts ->   $
ifstmt ->  if ( boolexpr ) then stmt else stmt
whilestmt ->  while ( boolexpr ) stmt
assgstmt ->  ID = arithexpr ;
decl -> type list;
type -> int
type -> real
list -> ID list1
list1 ->, list
list1 $
boolexpr -> arithexpr boolop arithexpr
boolop -> <
boolop -> >
boolop -> <=
boolop -> >=
boolop -> ==
arithexpr -> multexpr arithexprprime
arithexprprime -> + multexpr arithexprprime
arithexprprime -> - multexpr arithexprprime
arithexprprime -> $
multexpr ->  simpleexpr  multexprprime
multexprprime -> * simpleexpr multexprprime
multexprprime -> / simpleexpr multexprprime
multexprprime -> $
simpleexpr ->  ID
simpleexpr ->  NUM
simpleexpr ->  ( arithexpr )
